#include <stdio.h>               // Biblioteca padrão para entrada e saída
#include <string.h>              // Biblioteca manipular strings
#include <stdlib.h>              // funções para realizar várias operações, incluindo alocação de memória dinâmica (malloc)

#include "pico/stdlib.h"         // Biblioteca da Raspberry Pi Pico para funções padrão (GPIO, temporização, etc.)
#include "hardware/adc.h"        // Biblioteca da Raspberry Pi Pico para manipulação do conversor ADC
#include "pico/cyw43_arch.h"     // Biblioteca para arquitetura Wi-Fi da Pico com CYW43  

#include "lwip/pbuf.h"           // Lightweight IP stack - manipulação de buffers de pacotes de rede
#include "lwip/tcp.h"            // Lightweight IP stack - fornece funções e estruturas para trabalhar com o protocolo TCP
#include "lwip/netif.h"          // Lightweight IP stack - fornece funções e estruturas para trabalhar com interfaces de rede (netif)

// Credenciais WIFI - Tome cuidado se publicar no github!
#define WIFI_SSID "Nilson"
#define WIFI_PASSWORD "casaesnet"

// Definição dos pinos dos LEDs
#define LED_PIN CYW43_WL_GPIO_LED_PIN   // GPIO do CI CYW43
#define LED_BLUE_PIN 12                 // GPIO12 - LED azul
#define LED_GREEN_PIN 11                // GPIO11 - LED verde
#define LED_RED_PIN 13                  // GPIO13 - LED vermelho

// Inicializar os Pinos GPIO para acionamento dos LEDs da BitDogLab
void gpio_led_bitdog(void);

// Função de callback ao aceitar conexões TCP
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err);

// Função de callback para processar requisições HTTP
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err);

// Leitura da temperatura interna
float temp_read(void);

// Tratamento do request do usuário
void user_request(char **request);


void vsystem_monitor_task(void *pvParameters);
void vsystem_init(void);
void vupdate_system_status_page(void);
void init_web_server(void);
void liquid_level_control_task(void *pvParameters);
int read_liquid_level(void);
void temperature_control_task(void *pvParameters);
float read_temperature(void);
void ldr_sensor_task(void *pvParameters);
void pir_sensor_task(void *pvParameters);


// Função principal
int main()
{
    //Inicializa todos os tipos de bibliotecas stdio padrão presentes que estão ligados ao binário.
    stdio_init_all();

    // Inicializar os Pinos GPIO para acionamento dos LEDs da BitDogLab
    gpio_led_bitdog();

    //Inicializa a arquitetura do cyw43
    while (cyw43_arch_init())
    {
        printf("Falha ao inicializar Wi-Fi\n");
        sleep_ms(100);
        return -1;
    }

    // GPIO do CI CYW43 em nível baixo
    cyw43_arch_gpio_put(LED_PIN, 0);

    // Ativa o Wi-Fi no modo Station, de modo a que possam ser feitas ligações a outros pontos de acesso Wi-Fi.
    cyw43_arch_enable_sta_mode();

    // Conectar à rede WiFI - fazer um loop até que esteja conectado
    printf("Conectando ao Wi-Fi...\n");
    while (cyw43_arch_wifi_connect_timeout_ms(WIFI_SSID, WIFI_PASSWORD, CYW43_AUTH_WPA2_AES_PSK, 20000))
    {
        printf("Falha ao conectar ao Wi-Fi\n");
        sleep_ms(100);
        return -1;
    }
    printf("Conectado ao Wi-Fi\n");

    // Caso seja a interface de rede padrão - imprimir o IP do dispositivo.
    if (netif_default)
    {
        printf("IP do dispositivo: %s\n", ipaddr_ntoa(&netif_default->ip_addr));
    }

    // Configura o servidor TCP - cria novos PCBs TCP. É o primeiro passo para estabelecer uma conexão TCP.
    struct tcp_pcb *server = tcp_new();
    if (!server)
    {
        printf("Falha ao criar servidor TCP\n");
        return -1;
    }

    //vincula um PCB (Protocol Control Block) TCP a um endereço IP e porta específicos.
    if (tcp_bind(server, IP_ADDR_ANY, 80) != ERR_OK)
    {
        printf("Falha ao associar servidor TCP à porta 80\n");
        return -1;
    }

    // Coloca um PCB (Protocol Control Block) TCP em modo de escuta, permitindo que ele aceite conexões de entrada.
    server = tcp_listen(server);

    // Define uma função de callback para aceitar conexões TCP de entrada. É um passo importante na configuração de servidores TCP.
    tcp_accept(server, tcp_server_accept);
    printf("Servidor ouvindo na porta 80\n");

    // Inicializa o conversor ADC
    adc_init();
    adc_set_temp_sensor_enabled(true);

    while (true)
    {
        /* 
        * Efetuar o processamento exigido pelo cyw43_driver ou pela stack TCP/IP.
        * Este método deve ser chamado periodicamente a partir do ciclo principal 
        * quando se utiliza um estilo de sondagem pico_cyw43_arch 
        */
        cyw43_arch_poll(); // Necessário para manter o Wi-Fi ativo
        sleep_ms(100);      // Reduz o uso da CPU
    }

    //Desligar a arquitetura CYW43.
    cyw43_arch_deinit();
    return 0;
}

// -------------------------------------- Funções ---------------------------------

// Inicializar os Pinos GPIO para acionamento dos LEDs da BitDogLab
void gpio_led_bitdog(void){
    // Configuração dos LEDs como saída
    gpio_init(LED_BLUE_PIN);
    gpio_set_dir(LED_BLUE_PIN, GPIO_OUT);
    gpio_put(LED_BLUE_PIN, false);
    
    gpio_init(LED_GREEN_PIN);
    gpio_set_dir(LED_GREEN_PIN, GPIO_OUT);
    gpio_put(LED_GREEN_PIN, false);
    
    gpio_init(LED_RED_PIN);
    gpio_set_dir(LED_RED_PIN, GPIO_OUT);
    gpio_put(LED_RED_PIN, false);
}

// Função de callback ao aceitar conexões TCP
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
    tcp_recv(newpcb, tcp_server_recv);
    return ERR_OK;
}

// Tratamento do request do usuário - digite aqui
void user_request(char **request){

    if (strstr(*request, "GET /ligar_arcondicionado") != NULL)
    {
        gpio_put(LED_BLUE_PIN, 1);
    }
    else if (strstr(*request, "GET /ligar_lampadas") != NULL)
    {
        gpio_put(LED_BLUE_PIN, 0);
    }
    else if (strstr(*request, "GET /sleep_arcondicionado") != NULL)
    {
        gpio_put(LED_GREEN_PIN, 1);
    }
    else if (strstr(*request, "GET /desligar_lampadas") != NULL)
    {
        gpio_put(LED_GREEN_PIN, 0);
    }
    else if (strstr(*request, "GET /desligar_bomba") != NULL)
    {
        gpio_put(LED_RED_PIN, 1);
    }
    else
    {
        return;
    }
};

// Leitura da temperatura interna
float temp_read(void){
    adc_select_input(4);
    uint16_t raw_value = adc_read();
    const float conversion_factor = 3.3f / (1 << 12);
    float temperature = 27.0f - ((raw_value * conversion_factor) - 0.706f) / 0.001721f;
        return temperature;
}

// Função de callback para processar requisições HTTP
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
    if (!p)
    {
        tcp_close(tpcb);
        tcp_recv(tpcb, NULL);
        return ERR_OK;
    }

    // Alocação do request na memória dinámica
    char *request = (char *)malloc(p->len + 1);
    memcpy(request, p->payload, p->len);
    request[p->len] = '\0';

    printf("Request: %s\n", request);

    // Tratamento de request - Controle dos LEDs
    user_request(&request);
    
    // Leitura da temperatura interna
    float temperature = temp_read();

    // Cria a resposta HTML
    // char html[1024];
    char html[14000] = {0};

    // // Instruções html do webserver
    // snprintf(html, sizeof(html), // Formatar uma string e armazená-la em um buffer de caracteres
    //          "HTTP/1.1 200 OK\r\n"
    //          "Content-Type: text/html\r\n"
    //          "\r\n"
    //          "<!DOCTYPE html>\n"
    //          "<html>\n"
    //          "<head>\n"
    //          "<title> Embarcatech - LED Control </title>\n"
    //          "<style>\n"
    //          "body { background-color: #b5e5fb; font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }\n"
    //          "h1 { font-size: 64px; margin-bottom: 30px; }\n"
    //          "button { background-color: LightGray; font-size: 36px; margin: 10px; padding: 20px 40px; border-radius: 10px; }\n"
    //          ".temperature { font-size: 48px; margin-top: 30px; color: #333; }\n"
    //          "</style>\n"
    //          "</head>\n"
    //          "<body>\n"
    //          "<h1>Embarcatech: LED Control</h1>\n"
    //          "<form action=\"./blue_on\"><button>Ligar Azul</button></form>\n"
    //          "<form action=\"./blue_off\"><button>Desligar Azul</button></form>\n"
    //          "<form action=\"./green_on\"><button>Ligar Verde</button></form>\n"
    //          "<form action=\"./green_off\"><button>Desligar Verde</button></form>\n"
    //          "<form action=\"./red_on\"><button>Ligar Vermelho</button></form>\n"
    //          "<form action=\"./red_off\"><button>Desligar Vermelho</button></form>\n"
    //          "<p class=\"temperature\">Temperatura Interna: %.2f &deg;C</p>\n"
    //          "</body>\n"
    //          "</html>\n",
    //          temperature);

    snprintf(html, sizeof(html),
         "HTTP/1.1 200 OK\r\n"
         "Content-Type: text/html\r\n"
         "\r\n"
         "<!DOCTYPE html>\n"
         "<html lang=\"pt\">\n"
         "<head>\n"
         "<meta charset=\"UTF-8\">\n"
         "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
         "<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n"
         "<title>HomeControl - Automação Residencial</title>\n"
         "<link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n"
         "<link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\" rel=\"stylesheet\">\n"
         "<style>\n"
         ":root { --primary: #4361ee; --primary-dark: #3a56d4; --secondary: #4cc9f0; --success: #4CAF50; --success-hover: #45a049; --danger: #e63946; --warning: #ff9f1c; --dark: #1e1e1e; --gray-dark: #333333; --gray: #666666; --gray-light: #e0e0e0; --white: #ffffff; --border-radius: 12px; --box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15); --transition: all 0.3s ease; }\n"
         "* { margin: 0; padding: 0; box-sizing: border-box; }\n"
         "body { background: linear-gradient(135deg, var(--dark), var(--gray-dark)); font-family: 'Montserrat', sans-serif; color: var(--white); line-height: 1.6; min-height: 100vh; padding: 20px; }\n"
         ".container { max-width: 1200px; margin: 0 auto; padding: 20px; }\n"
         "header { display: flex; flex-direction: column; align-items: center; margin-bottom: 40px; position: relative; }\n"
         ".logo { display: flex; align-items: center; gap: 15px; margin-bottom: 10px; }\n"
         ".logo i { font-size: 2.5rem; color: var(--secondary); }\n"
         "h1 { font-size: 2.8rem; background: linear-gradient(90deg, var(--primary), var(--secondary)); -webkit-background-clip: text; background-clip: text; color: transparent; font-weight: 700; margin: 0; letter-spacing: 1px; }\n"
         ".subtitle { font-size: 1.1rem; color: var(--gray-light); font-weight: 300; margin-top: 5px; margin-bottom: 20px; }\n"
         ".dashboard { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 30px; margin-top: 30px; }\n"
         ".card { background: rgba(255, 255, 255, 0.05); backdrop-filter: blur(10px); border-radius: var(--border-radius); padding: 25px; box-shadow: var(--box-shadow); transition: var(--transition); border: 1px solid rgba(255, 255, 255, 0.1); overflow: hidden; }\n"
         ".card:hover { transform: translateY(-5px); box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2); border: 1px solid rgba(255, 255, 255, 0.2); }\n"
         ".card-header { display: flex; align-items: center; justify-content: space-between; margin-bottom: 25px; padding-bottom: 15px; border-bottom: 1px solid rgba(255, 255, 255, 0.1); }\n"
         ".card-title { font-size: 1.4rem; font-weight: 600; color: var(--white); display: flex; align-items: center; gap: 10px; margin: 0; }\n"
         ".card-title i { color: var(--secondary); }\n"
         ".card-body { padding: 10px 0; }\n"
         ".button-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }\n"
         ".button { display: flex; align-items: center; justify-content: center; gap: 10px; background: rgba(255, 255, 255, 0.08); color: var(--white); border: none; padding: 15px 20px; border-radius: var(--border-radius); font-size: 1rem; font-weight: 500; cursor: pointer; transition: var(--transition); text-align: center; width: 100%; }\n"
         ".button-primary { background: linear-gradient(145deg, var(--primary), var(--primary-dark)); }\n"
         ".button-success { background: linear-gradient(145deg, var(--success), var(--success-hover)); }\n"
         ".button-danger { background: linear-gradient(145deg, var(--danger), #d63031); }\n"
         ".button:hover { transform: translateY(-3px); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2); }\n"
         ".button:active { transform: translateY(1px); }\n"
         ".button i { font-size: 1.2rem; }\n"
         ".metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-top: 10px; }\n"
         ".metric { background: rgba(255, 255, 255, 0.08); border-radius: var(--border-radius); padding: 20px; text-align: center; transition: var(--transition); }\n"
         ".metric:hover { background: rgba(255, 255, 255, 0.12); }\n"
         ".metric-icon { font-size: 2rem; margin-bottom: 10px; }\n"
         ".temperature-icon { color: var(--warning); }\n"
         ".water-icon { color: var(--secondary); }\n"
         ".metric-value { font-size: 2rem; font-weight: 700; margin: 10px 0; line-height: 1; }\n"
         ".metric-label { font-size: 0.9rem; color: var(--gray-light); font-weight: 400; }\n"
         ".status-indicator { display: inline-block; width: 12px; height: 12px; border-radius: 50%; background-color: var(--success); margin-right: 5px; }\n"
         ".status-text { font-size: 0.9rem; color: var(--gray-light); }\n"
         ".card-footer { display: flex; align-items: center; justify-content: space-between; margin-top: 25px; padding-top: 15px; border-top: 1px solid rgba(255, 255, 255, 0.1); font-size: 0.9rem; color: var(--gray-light); }\n"
         ".scenes { margin-top: 20px; }\n"
         ".scene-button { display: flex; align-items: center; background: rgba(67, 97, 238, 0.1); border: 1px solid rgba(67, 97, 238, 0.3); border-radius: var(--border-radius); padding: 15px; margin-bottom: 15px; cursor: pointer; transition: var(--transition); }\n"
         ".scene-button:hover { background: rgba(67, 97, 238, 0.2); transform: translateX(5px); }\n"
         ".scene-icon { margin-right: 15px; width: 40px; height: 40px; background: var(--primary); border-radius: 50%; display: flex; align-items: center; justify-content: center; flex-shrink: 0; }\n"
         ".scene-icon i { color: var(--white); font-size: 1.2rem; }\n"
         ".scene-info { flex: 1; text-align: left; }\n"
         ".scene-title { font-weight: 600; font-size: 1rem; margin-bottom: 3px; }\n"
         ".scene-description { font-size: 0.85rem; color: var(--gray-light); }\n"
         "@media (max-width: 768px) { .dashboard { grid-template-columns: 1fr; } h1 { font-size: 2.2rem; } .logo i { font-size: 2rem; } .button-grid { grid-template-columns: 1fr; } .metrics { grid-template-columns: 1fr 1fr; } }\n"
         "@media (max-width: 480px) { .metrics { grid-template-columns: 1fr; } .card { padding: 20px 15px; } h1 { font-size: 1.8rem; } }\n"
         "</style>\n"
         "</head>\n"
         "<body>\n"
         "<div class=\"container\">\n"
         "<header>\n"
         "<div class=\"logo\">\n"
         "<i class=\"fas fa-home\"></i>\n"
         "<h1>HomeControl</h1>\n"
         "</div>\n"
         "<p class=\"subtitle\">Sua casa inteligente em um só lugar</p>\n"
         "</header>\n"
         "<div class=\"dashboard\">\n"
         "<div class=\"card\">\n"
         "<div class=\"card-header\">\n"
         "<h2 class=\"card-title\"><i class=\"fas fa-plug\"></i> Dispositivos</h2>\n"
         "<div>\n"
         "<span class=\"status-indicator\"></span>\n"
         "<span class=\"status-text\">Online</span>\n"
         "</div>\n"
         "</div>\n"
         "<div class=\"card-body\">\n"
         "<div class=\"button-grid\">\n"
         "<button class=\"button button-primary\">\n"
         "<i class=\"fas fa-wind\"></i>\n"
         "Ligar Ar Condicionado\n"
         "</button>\n"
         "<button class=\"button button-primary\">\n"
         "<i class=\"fas fa-lightbulb\"></i>\n"
         "Ligar Luzes\n"
         "</button>\n"
         "<button class=\"button\">\n"
         "<i class=\"fas fa-moon\"></i>\n"
         "Sleep para o Ar\n"
         "</button>\n"
         "<button class=\"button\">\n"
         "<i class=\"fas fa-power-off\"></i>\n"
         "Desligar Lâmpadas\n"
         "</button>\n"
         "<button class=\"button button-danger\">\n"
         "<i class=\"fas fa-tint-slash\"></i>\n"
         "Desligar Bomba d'Água\n"
         "</button>\n"
         "</div>\n"
         "</div>\n"
         "<div class=\"card-footer\">\n"
         "<span>Última atualização: Agora</span>\n"
         "<span><i class=\"fas fa-sync-alt\"></i> Atualizar</span>\n"
         "</div>\n"
         "</div>\n"
         "<div class=\"card\">\n"
         "<div class=\"card-header\">\n"
         "<h2 class=\"card-title\"><i class=\"fas fa-chart-line\"></i> Monitoramento</h2>\n"
         "<div>\n"
         "<span class=\"status-indicator\"></span>\n"
         "<span class=\"status-text\">Tempo real</span>\n"
         "</div>\n"
         "</div>\n"
         "<div class=\"card-body\">\n"
         "<div class=\"metrics\">\n"
         "<div class=\"metric\">\n"
         "<div class=\"metric-icon temperature-icon\">\n"
         "<i class=\"fas fa-temperature-high\"></i>\n"
         "</div>\n"
         "<div class=\"metric-value\">23.5 °C</div>\n"
         "<div class=\"metric-label\">Temperatura Interna</div>\n"
         "</div>\n"
         "<div class=\"metric\">\n"
         "<div class=\"metric-icon water-icon\">\n"
         "<i class=\"fas fa-water\"></i>\n"
         "</div>\n"
         "<div class=\"metric-value\">78 cm</div>\n"
         "<div class=\"metric-label\">Nível de Água</div>\n"
         "</div>\n"
         "</div>\n"
         "<div class=\"scenes\">\n"
         "<h3 style=\"margin: 25px 0 15px; font-size: 1.1rem; color: var(--gray-light);\">Cenas Rápidas</h3>\n"
         "<div class=\"scene-button\">\n"
         "<div class=\"scene-icon\">\n"
         "<i class=\"fas fa-couch\"></i>\n"
         "</div>\n"
         "<div class=\"scene-info\">\n"
         "<div class=\"scene-title\">Modo Cinema</div>\n"
         "<div class=\"scene-description\">Diminui as luzes e liga o ar-condicionado</div>\n"
         "</div>\n"
         "</div>\n"
         "<div class=\"scene-button\">\n"
         "<div class=\"scene-icon\">\n"
         "<i class=\"fas fa-bed\"></i>\n"
         "</div>\n"
         "<div class=\"scene-info\">\n"
         "<div class=\"scene-title\">Modo Noturno</div>\n"
         "<div class=\"scene-description\">Desliga dispositivos e ativa monitoramento</div>\n"
         "</div>\n"
         "</div>\n"
         "</div>\n"
         "</div>\n"
         "<div class=\"card-footer\">\n"
         "<span>Atualizado há 2 minutos</span>\n");
    // Escreve dados para envio (mas não os envia imediatamente).
    tcp_write(tpcb, html, strlen(html), TCP_WRITE_FLAG_COPY);

    // Envia a mensagem
    tcp_output(tpcb);

    //libera memória alocada dinamicamente
    free(request);
    
    //libera um buffer de pacote (pbuf) que foi alocado anteriormente
    pbuf_free(p);

    return ERR_OK;
}

